#!/bin/bash

# üîß Script de Diagn√≥stico e Corre√ß√£o do Erro "externally-managed-environment"
# Para Ubuntu 22.04+ e Python 3.12+

echo "üîß Diagn√≥stico: externally-managed-environment"
echo "=============================================="

# Fun√ß√£o para logs coloridos
log_info() {
    echo -e "\033[36m[INFO]\033[0m $1"
}

log_success() {
    echo -e "\033[32m[SUCCESS]\033[0m $1"
}

log_error() {
    echo -e "\033[31m[ERROR]\033[0m $1"
}

log_warning() {
    echo -e "\033[33m[WARNING]\033[0m $1"
}

# 1. Diagn√≥stico do problema
log_info "Diagnosticando o problema..."

# Verificar Python e sistema
PYTHON_VERSION=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')" 2>/dev/null || echo "unknown")
OS_INFO=$(cat /etc/os-release 2>/dev/null | grep PRETTY_NAME | cut -d'"' -f2 || echo "Unknown")

echo "üìç Sistema: $OS_INFO"
echo "üìç Python: $PYTHON_VERSION"

# Verificar se arquivo EXTERNALLY-MANAGED existe
EXTERNAL_MANAGED_FILE=""
for path in "/usr/lib/python3/dist-packages" "/usr/lib/python$PYTHON_VERSION/site-packages" "/usr/local/lib/python$PYTHON_VERSION/dist-packages"; do
    if [ -f "$path/EXTERNALLY-MANAGED" ]; then
        EXTERNAL_MANAGED_FILE="$path/EXTERNALLY-MANAGED"
        break
    fi
done

if [ -n "$EXTERNAL_MANAGED_FILE" ]; then
    log_warning "Arquivo EXTERNALLY-MANAGED encontrado: $EXTERNAL_MANAGED_FILE"
    echo "üìÑ Conte√∫do:"
    cat "$EXTERNAL_MANAGED_FILE" | head -10
    echo ""
else
    log_info "Arquivo EXTERNALLY-MANAGED n√£o encontrado (normal em sistemas mais antigos)"
fi

# Verificar pip
if python3 -m pip --version >/dev/null 2>&1; then
    log_success "pip funcional: $(python3 -m pip --version)"
else
    log_error "pip n√£o funcional no Python do sistema"
fi

# Testar cria√ß√£o de venv
log_info "Testando cria√ß√£o de ambiente virtual..."
if python3 -m venv test_diagnose_venv >/dev/null 2>&1; then
    log_success "python3 -m venv funciona"
    rm -rf test_diagnose_venv
    VENV_WORKS=true
else
    log_error "python3 -m venv n√£o funciona"
    VENV_WORKS=false
fi

# 2. Oferecer solu√ß√µes baseadas no diagn√≥stico
echo ""
echo "üîß SOLU√á√ïES RECOMENDADAS"
echo "======================="

if [ "$VENV_WORKS" = true ]; then
    log_success "Ambiente virtual funciona, problema pode ser de depend√™ncias"
    echo ""
    echo "‚úÖ Solu√ß√µes r√°pidas:"
    echo "   1. ./scripts/setup_secure_venv.sh"
    echo "   2. python3 -m venv venv && source venv/bin/activate"
    echo "   3. venv/bin/pip install -r requirements.txt"
else
    log_warning "Ambiente virtual n√£o funciona, precisa de corre√ß√£o do sistema"
    echo ""
    echo "üîß Solu√ß√µes por ordem de prefer√™ncia:"
    echo ""
    echo "1Ô∏è‚É£ SOLU√á√ÉO RECOMENDADA (autom√°tica):"
    echo "   ./scripts/setup_secure_venv.sh"
    echo ""
    echo "2Ô∏è‚É£ SOLU√á√ÉO MANUAL (instalar depend√™ncias):"
    echo "   sudo apt update"
    echo "   sudo apt install -y python$PYTHON_VERSION-venv python$PYTHON_VERSION-full"
    echo "   python3 -m venv venv"
    echo ""
    echo "3Ô∏è‚É£ SOLU√á√ÉO ALTERNATIVA (virtualenv):"
    echo "   sudo apt install -y python3-virtualenv"
    echo "   virtualenv venv"
    echo ""
    echo "4Ô∏è‚É£ SOLU√á√ÉO EXTREMA (n√£o recomendada):"
    echo "   # Remove a prote√ß√£o do sistema (PERIGOSO)"
    echo "   # sudo rm $EXTERNAL_MANAGED_FILE"
fi

# 3. Verificar se j√° existe venv no projeto
echo ""
if [ -d "venv" ]; then
    log_info "Ambiente virtual 'venv' j√° existe"
    
    if [ -f "venv/bin/python" ]; then
        log_success "venv/bin/python existe"
        echo "üìç Vers√£o: $(venv/bin/python --version 2>/dev/null || echo 'Erro ao verificar vers√£o')"
        
        if venv/bin/python -m pip --version >/dev/null 2>&1; then
            log_success "pip funcionando no venv"
            echo "üìç pip: $(venv/bin/python -m pip --version)"
        else
            log_error "pip n√£o funciona no venv"
        fi
    else
        log_error "venv/bin/python n√£o existe - venv corrompido"
        echo "üîß Solu√ß√£o: rm -rf venv && ./scripts/setup_secure_venv.sh"
    fi
else
    log_info "Ambiente virtual n√£o existe - precisa ser criado"
fi

# 4. Auto-execu√ß√£o se solicitado
echo ""
read -p "ü§ñ Executar corre√ß√£o autom√°tica agora? (y/N): " auto_fix
if [[ $auto_fix == [yY] ]]; then
    log_info "Executando corre√ß√£o autom√°tica..."
    
    if [ -f "scripts/setup_secure_venv.sh" ]; then
        ./scripts/setup_secure_venv.sh
    else
        log_error "Script setup_secure_venv.sh n√£o encontrado"
        echo "Execute os comandos manuais listados acima"
    fi
else
    echo ""
    echo "üìù RESUMO DOS PR√ìXIMOS PASSOS:"
    echo "============================="
    echo "1. Execute: ./scripts/setup_secure_venv.sh"
    echo "2. Ou siga as solu√ß√µes manuais listadas acima"
    echo "3. Teste com: python3 test_runner.py --quick"
    echo "4. Deploy com: ./scripts/deploy_local.sh"
fi

echo ""
echo "üí° Para mais informa√ß√µes, consulte:"
echo "   - DEPLOY_INSTRUCTIONS.md"
echo "   - https://peps.python.org/pep-0668/"
