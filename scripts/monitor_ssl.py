#!/usr/bin/env python3
"""
Monitor de valida√ß√£o SSL - Verifica automaticamente se o certificado foi validado
Parte do projeto DJBlog - Deploy em produ√ß√£o
"""

import boto3
import time
import sys
from datetime import datetime

def main():
    print("üîç MONITOR DE VALIDA√á√ÉO SSL")
    print("=" * 50)
    print(f"‚è∞ {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()
    
    # Configurar cliente ACM
    try:
        acm = boto3.client('acm', region_name='us-east-1')
        print("‚úÖ Conectado √† AWS ACM")
    except Exception as e:
        print(f"‚ùå Erro ao conectar AWS: {e}")
        return
    
    # ARN do certificado
    cert_arn = "arn:aws:acm:us-east-1:317304475005:certificate/be47a77b-fe2c-4446b-b697-b192ab1857c8"
    
    print("üîí Verificando status do certificado...")
    print()
    
    # Verificar status v√°rias vezes
    for tentativa in range(1, 11):  # 10 tentativas
        try:
            response = acm.describe_certificate(CertificateArn=cert_arn)
            cert = response['Certificate']
            status = cert['Status']
            
            print(f"üîÑ Tentativa {tentativa}/10")
            print(f"üìã Status: {status}")
            
            if status == 'ISSUED':
                print("üéâ CERTIFICADO VALIDADO COM SUCESSO!")
                print("‚úÖ SSL est√° pronto para uso")
                print()
                print("üöÄ PR√ìXIMOS PASSOS:")
                print("‚Ä¢ Execute: python scripts/configurar_ssl_dominio.py")
                print("‚Ä¢ O CloudFront ser√° configurado automaticamente")
                print("‚Ä¢ Teste: https://noticiasontem.com.br")
                print("‚Ä¢ Teste: https://www.noticiasontem.com.br")
                return
            
            elif status == 'PENDING_VALIDATION':
                print("‚è≥ Ainda aguardando valida√ß√£o DNS...")
                
                # Mostrar registros necess√°rios
                if 'DomainValidationOptions' in cert:
                    print("üìã Registros DNS necess√°rios:")
                    for domain_validation in cert['DomainValidationOptions']:
                        if 'ResourceRecord' in domain_validation:
                            record = domain_validation['ResourceRecord']
                            domain = domain_validation['DomainName']
                            print(f"   ‚Ä¢ {domain}: {record['Name']} ‚Üí {record['Value']}")
                
            elif status == 'FAILED':
                print("‚ùå CERTIFICADO FALHOU NA VALIDA√á√ÉO")
                print("üîç Verifique se os registros CNAME est√£o corretos")
                return
            
            else:
                print(f"ü§î Status desconhecido: {status}")
            
            print(f"‚è∞ Aguardando 30 segundos... ({tentativa}/10)")
            print("-" * 50)
            
            if tentativa < 10:
                time.sleep(30)  # Aguardar 30 segundos
                
        except Exception as e:
            print(f"‚ùå Erro ao verificar certificado: {e}")
            break
    
    print()
    print("‚è∞ MONITORAMENTO FINALIZADO")
    print("üìã Se o certificado ainda n√£o foi validado:")
    print("‚Ä¢ Verifique se os registros CNAME est√£o corretos no Cloudflare")
    print("‚Ä¢ Aguarde mais alguns minutos (pode levar at√© 30 min)")
    print("‚Ä¢ Execute novamente: python scripts/monitor_ssl.py")
    print("‚Ä¢ Ou execute: python scripts/configurar_ssl_dominio.py")

if __name__ == "__main__":
    main()
