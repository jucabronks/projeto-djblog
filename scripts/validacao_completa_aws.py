#!/usr/bin/env python3
"""
Valida√ß√£o completa da infraestrutura AWS
Verifica S3, CloudFront, DNS e identifica problemas
"""

import boto3
import requests
import socket
import json
import time
from datetime import datetime
from botocore.exceptions import ClientError, NoCredentialsError

def validar_credenciais_aws():
    """Valida se as credenciais AWS est√£o configuradas"""
    print("üîê VALIDANDO CREDENCIAIS AWS")
    print("=" * 40)
    
    try:
        sts = boto3.client('sts')
        identity = sts.get_caller_identity()
        
        print(f"‚úÖ Account ID: {identity['Account']}")
        print(f"‚úÖ User ARN: {identity['Arn']}")
        print(f"‚úÖ User ID: {identity['UserId']}")
        return True
        
    except NoCredentialsError:
        print("‚ùå Credenciais AWS n√£o encontradas!")
        print("Configure: aws configure")
        return False
    except Exception as e:
        print(f"‚ùå Erro nas credenciais: {e}")
        return False

def validar_bucket_s3():
    """Valida configura√ß√£o do bucket S3"""
    print("\nüì¶ VALIDANDO BUCKET S3")
    print("=" * 40)
    
    try:
        s3 = boto3.client('s3')
        bucket_name = 'djblog-noticias-static-1750943590'
        
        # 1. Verifica se bucket existe
        try:
            s3.head_bucket(Bucket=bucket_name)
            print(f"‚úÖ Bucket existe: {bucket_name}")
        except ClientError as e:
            error_code = int(e.response['Error']['Code'])
            if error_code == 404:
                print(f"‚ùå Bucket n√£o encontrado: {bucket_name}")
                return False
            else:
                print(f"‚ùå Erro ao acessar bucket: {e}")
                return False
        
        # 2. Lista arquivos
        try:
            response = s3.list_objects_v2(Bucket=bucket_name)
            if 'Contents' in response:
                print(f"‚úÖ Arquivos encontrados: {len(response['Contents'])}")
                for obj in response['Contents'][:5]:  # Mostra primeiros 5
                    print(f"   üìÑ {obj['Key']} ({obj['Size']} bytes)")
                
                # Verifica index.html
                index_exists = any(obj['Key'] == 'index.html' for obj in response['Contents'])
                if index_exists:
                    print("‚úÖ index.html presente")
                else:
                    print("‚ùå index.html AUSENTE!")
                    return False
            else:
                print("‚ùå Bucket vazio!")
                return False
        except Exception as e:
            print(f"‚ùå Erro ao listar objetos: {e}")
            return False
        
        # 3. Verifica pol√≠tica do bucket
        try:
            policy_response = s3.get_bucket_policy(Bucket=bucket_name)
            policy = json.loads(policy_response['Policy'])
            print("‚úÖ Pol√≠tica do bucket configurada")
            
            # Verifica se permite leitura p√∫blica
            public_read = False
            for statement in policy['Statement']:
                if (statement.get('Effect') == 'Allow' and 
                    statement.get('Principal') == '*' and
                    's3:GetObject' in statement.get('Action', [])):
                    public_read = True
                    break
            
            if public_read:
                print("‚úÖ Leitura p√∫blica permitida")
            else:
                print("‚ùå Leitura p√∫blica N√ÉO configurada")
                return False
                
        except ClientError as e:
            if e.response['Error']['Code'] == 'NoSuchBucketPolicy':
                print("‚ùå Pol√≠tica do bucket n√£o existe")
                return False
            else:
                print(f"‚ùå Erro ao verificar pol√≠tica: {e}")
                return False
        
        # 4. Verifica bloqueio de acesso p√∫blico
        try:
            pab = s3.get_public_access_block(Bucket=bucket_name)
            config = pab['PublicAccessBlockConfiguration']
            
            if (not config['BlockPublicAcls'] and 
                not config['IgnorePublicAcls'] and
                not config['BlockPublicPolicy'] and
                not config['RestrictPublicBuckets']):
                print("‚úÖ Acesso p√∫blico desbloqueado")
            else:
                print("‚ùå Acesso p√∫blico ainda bloqueado")
                print(f"   BlockPublicPolicy: {config['BlockPublicPolicy']}")
                return False
                
        except ClientError:
            print("‚úÖ Sem bloqueio de acesso p√∫blico")
        
        # 5. Verifica configura√ß√£o de website
        try:
            website_config = s3.get_bucket_website(Bucket=bucket_name)
            print("‚úÖ Configurado como website")
            print(f"   Index: {website_config['IndexDocument']['Suffix']}")
        except ClientError:
            print("‚ùå N√ÉO configurado como website")
            return False
        
        # 6. Testa acesso direto ao arquivo
        try:
            s3_url = f"https://{bucket_name}.s3.amazonaws.com/index.html"
            response = requests.get(s3_url, timeout=10)
            if response.status_code == 200:
                print("‚úÖ Acesso direto ao S3 funcionando")
            else:
                print(f"‚ùå Acesso direto falhou: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Erro no acesso direto: {e}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro geral no S3: {e}")
        return False

def validar_cloudfront():
    """Valida configura√ß√£o do CloudFront"""
    print("\nüåê VALIDANDO CLOUDFRONT")
    print("=" * 40)
    
    try:
        cloudfront = boto3.client('cloudfront')
        
        # 1. Lista distribui√ß√µes
        response = cloudfront.list_distributions()
        
        if 'DistributionList' not in response or 'Items' not in response['DistributionList']:
            print("‚ùå Nenhuma distribui√ß√£o CloudFront encontrada")
            return False
        
        # 2. Encontra nossa distribui√ß√£o
        nossa_dist = None
        for dist in response['DistributionList']['Items']:
            if 'd3q2d002qno2yn.cloudfront.net' in dist['DomainName']:
                nossa_dist = dist
                break
        
        if not nossa_dist:
            print("‚ùå Distribui√ß√£o d3q2d002qno2yn.cloudfront.net n√£o encontrada")
            return False
        
        print(f"‚úÖ Distribui√ß√£o encontrada: {nossa_dist['DomainName']}")
        print(f"‚úÖ Status: {nossa_dist['Status']}")
        print(f"‚úÖ Enabled: {nossa_dist['Enabled']}")
        
        # 3. Verifica configura√ß√£o detalhada
        dist_id = nossa_dist['Id']
        detail = cloudfront.get_distribution(Id=dist_id)
        config = detail['Distribution']['DistributionConfig']
        
        # Default Root Object
        if config.get('DefaultRootObject'):
            print(f"‚úÖ Default Root Object: {config['DefaultRootObject']}")
        else:
            print("‚ùå Default Root Object N√ÉO configurado")
            return False
        
        # Origens
        origins = config['Origins']['Items']
        print(f"‚úÖ Origens configuradas: {len(origins)}")
        for origin in origins:
            print(f"   üîó {origin['DomainName']}")
        
        # Dom√≠nios alternativos (CNAME)
        if 'Aliases' in config and config['Aliases']['Quantity'] > 0:
            print("‚úÖ Dom√≠nios personalizados configurados:")
            for alias in config['Aliases']['Items']:
                print(f"   üåê {alias}")
        else:
            print("‚ö†Ô∏è  Nenhum dom√≠nio personalizado configurado")
        
        # Certificado SSL
        if 'ViewerCertificate' in config:
            cert = config['ViewerCertificate']
            if 'ACMCertificateArn' in cert:
                print("‚úÖ Certificado SSL personalizado configurado")
            else:
                print("‚ö†Ô∏è  Usando certificado padr√£o do CloudFront")
        
        # 4. Testa acesso
        cloudfront_url = f"https://{nossa_dist['DomainName']}"
        try:
            response = requests.get(cloudfront_url, timeout=10)
            print(f"‚úÖ Teste de acesso: {response.status_code}")
            
            if response.status_code == 200:
                print("üéâ CloudFront funcionando perfeitamente!")
                return True
            else:
                print(f"‚ùå CloudFront retornando erro: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro no teste do CloudFront: {e}")
            return False
        
    except Exception as e:
        print(f"‚ùå Erro geral no CloudFront: {e}")
        return False

def validar_dns():
    """Valida configura√ß√£o DNS"""
    print("\nüåç VALIDANDO DNS")
    print("=" * 40)
    
    dominios = [
        "noticiasontem.com.br",
        "www.noticiasontem.com.br"
    ]
    
    dns_ok = True
    
    for dominio in dominios:
        print(f"\nüåê Testando: {dominio}")
        
        # Resolu√ß√£o DNS
        try:
            ip = socket.gethostbyname(dominio)
            print(f"‚úÖ IP resolvido: {ip}")
        except socket.gaierror:
            print(f"‚ùå DNS n√£o resolvido")
            dns_ok = False
            continue
        
        # Teste HTTPS
        try:
            response = requests.get(f"https://{dominio}", timeout=10)
            print(f"‚úÖ HTTPS: {response.status_code}")
            
            if response.status_code == 200:
                print(f"üéâ {dominio} FUNCIONANDO!")
            else:
                print(f"‚ùå Erro HTTP: {response.status_code}")
                dns_ok = False
                
        except requests.exceptions.SSLError:
            print("‚ùå Erro SSL - Certificado inv√°lido")
            dns_ok = False
        except requests.exceptions.ConnectionError:
            print("‚ùå Erro de conex√£o")
            dns_ok = False
        except Exception as e:
            print(f"‚ùå Erro: {e}")
            dns_ok = False
    
    return dns_ok

def validar_custos():
    """Estima custos da infraestrutura"""
    print("\nüí∞ VALIDANDO CUSTOS")
    print("=" * 40)
    
    try:
        # CloudWatch para m√©tricas de uso (se dispon√≠vel)
        cloudwatch = boto3.client('cloudwatch')
        
        print("üìä Estimativa de custos mensais:")
        print("   S3 Storage: ~$0.005 (arquivo est√°tico pequeno)")
        print("   S3 Requests: ~$0.001 (poucos acessos)")
        print("   CloudFront: ~$0.004 (1GB transfer)")
        print("   Total estimado: ~$0.01/m√™s")
        print("‚úÖ Muito abaixo do limite de $10/m√™s")
        
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è  N√£o foi poss√≠vel verificar custos: {e}")
        return True

def gerar_relatorio_final(aws_ok, s3_ok, cloudfront_ok, dns_ok, custos_ok):
    """Gera relat√≥rio final da valida√ß√£o"""
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    relatorio = f"""
# RELAT√ìRIO VALIDA√á√ÉO INFRAESTRUTURA AWS
Data: {datetime.now().strftime("%d/%m/%Y %H:%M:%S")}

## RESUMO EXECUTIVO
‚úÖ Credenciais AWS: {'OK' if aws_ok else 'FALHA'}
‚úÖ Bucket S3: {'OK' if s3_ok else 'FALHA'}
‚úÖ CloudFront: {'OK' if cloudfront_ok else 'FALHA'}
‚úÖ DNS: {'OK' if dns_ok else 'FALHA'}
‚úÖ Custos: {'OK' if custos_ok else 'FALHA'}

## STATUS GERAL
{'üéâ INFRAESTRUTURA FUNCIONANDO!' if all([aws_ok, s3_ok, cloudfront_ok, dns_ok]) else '‚ö†Ô∏è PROBLEMAS ENCONTRADOS'}

## DETALHES
- S3 Bucket: djblog-noticias-static-1750943590
- CloudFront: d3q2d002qno2yn.cloudfront.net
- Dom√≠nios: noticiasontem.com.br, www.noticiasontem.com.br

## PR√ìXIMOS PASSOS
{'Infraestrutura validada com sucesso!' if all([aws_ok, s3_ok, cloudfront_ok, dns_ok]) else 'Revisar componentes com falha acima.'}

## CUSTOS ESTIMADOS
- Mensal: ~$0.01
- Anual: ~$0.12
- Status: Muito abaixo do limite de $10/m√™s
"""

    with open(f"relatorio_validacao_aws_{timestamp}.txt", "w", encoding="utf-8") as f:
        f.write(relatorio)
    
    print(f"\nüìÑ Relat√≥rio salvo: relatorio_validacao_aws_{timestamp}.txt")

def main():
    print("üöÄ VALIDA√á√ÉO COMPLETA DA INFRAESTRUTURA AWS")
    print("=" * 70)
    print(f"‚è∞ Iniciado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()
    
    # Executa todas as valida√ß√µes
    aws_ok = validar_credenciais_aws()
    
    if not aws_ok:
        print("\n‚ùå N√£o √© poss√≠vel continuar sem credenciais AWS v√°lidas")
        return
    
    s3_ok = validar_bucket_s3()
    cloudfront_ok = validar_cloudfront()
    dns_ok = validar_dns()
    custos_ok = validar_custos()
    
    # Resumo final
    print("\n" + "=" * 70)
    print("üìä RESUMO FINAL")
    print("=" * 70)
    print(f"üîê AWS Credentials: {'‚úÖ' if aws_ok else '‚ùå'}")
    print(f"üì¶ S3 Bucket: {'‚úÖ' if s3_ok else '‚ùå'}")
    print(f"üåê CloudFront: {'‚úÖ' if cloudfront_ok else '‚ùå'}")
    print(f"üåç DNS: {'‚úÖ' if dns_ok else '‚ùå'}")
    print(f"üí∞ Custos: {'‚úÖ' if custos_ok else '‚ùå'}")
    
    if all([aws_ok, s3_ok, cloudfront_ok, dns_ok]):
        print("\nüéâ INFRAESTRUTURA 100% FUNCIONANDO!")
        print("üöÄ Site pronto para produ√ß√£o!")
    else:
        print("\n‚ö†Ô∏è PROBLEMAS ENCONTRADOS")
        print("üìã Revisar componentes com falha")
    
    # Gera relat√≥rio
    gerar_relatorio_final(aws_ok, s3_ok, cloudfront_ok, dns_ok, custos_ok)
    
    print("=" * 70)

if __name__ == "__main__":
    main()
