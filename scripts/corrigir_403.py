#!/usr/bin/env python3
"""
Script para corrigir erro 403 do CloudFront
Verifica e corrige configura√ß√µes do S3 e CloudFront
"""

import boto3
import json
import requests
import os
from datetime import datetime

def verificar_s3_bucket():
    """Verifica configura√ß√µes do bucket S3"""
    print("üîç VERIFICANDO BUCKET S3")
    print("=" * 40)
    
    try:
        s3 = boto3.client('s3')
        bucket_name = 'djblog-noticias-static-1750943590'
        
        # Lista objetos no bucket
        print("üìÅ Listando arquivos no bucket...")
        response = s3.list_objects_v2(Bucket=bucket_name)
        
        if 'Contents' in response:
            print(f"‚úÖ Encontrados {len(response['Contents'])} arquivos:")
            for obj in response['Contents'][:10]:  # Mostra apenas os primeiros 10
                print(f"   üìÑ {obj['Key']}")
                
            # Verifica se index.html existe
            index_exists = any(obj['Key'] == 'index.html' for obj in response['Contents'])
            if index_exists:
                print("‚úÖ index.html encontrado!")
            else:
                print("‚ùå index.html N√ÉO encontrado!")
                return False
        else:
            print("‚ùå Bucket vazio!")
            return False
            
        # Verifica pol√≠tica do bucket
        print("\nüîí Verificando pol√≠tica do bucket...")
        try:
            policy_response = s3.get_bucket_policy(Bucket=bucket_name)
            print("‚úÖ Pol√≠tica do bucket existe")
        except s3.exceptions.NoSuchBucketPolicy:
            print("‚ùå Bucket n√£o tem pol√≠tica p√∫blica!")
            return False
            
        # Verifica website configuration
        print("\nüåê Verificando configura√ß√£o de website...")
        try:
            website_config = s3.get_bucket_website(Bucket=bucket_name)
            print("‚úÖ Configura√ß√£o de website existe")
            if 'IndexDocument' in website_config:
                print(f"‚úÖ Documento √≠ndice: {website_config['IndexDocument']['Suffix']}")
        except Exception:
            print("‚ùå Bucket n√£o configurado como website!")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar S3: {e}")
        return False

def corrigir_s3_bucket():
    """Corrige configura√ß√µes do bucket S3"""
    print("\nüîß CORRIGINDO BUCKET S3")
    print("=" * 40)
    
    try:
        s3 = boto3.client('s3')
        bucket_name = 'djblog-noticias-static-1750943590'
        
        # 1. PRIMEIRO: Desbloquear acesso p√∫blico
        print("1Ô∏è‚É£ Desbloqueando acesso p√∫blico...")
        s3.put_public_access_block(
            Bucket=bucket_name,
            PublicAccessBlockConfiguration={
                'BlockPublicAcls': False,
                'IgnorePublicAcls': False,
                'BlockPublicPolicy': False,
                'RestrictPublicBuckets': False
            }
        )
        print("‚úÖ Acesso p√∫blico desbloqueado")
        
        # 2. Configurar como website
        print("2Ô∏è‚É£ Configurando como website...")
        website_config = {
            'IndexDocument': {'Suffix': 'index.html'},
            'ErrorDocument': {'Key': 'error.html'}
        }
        s3.put_bucket_website(Bucket=bucket_name, WebsiteConfiguration=website_config)
        print("‚úÖ Website configurado")
        
        # 3. Pol√≠tica p√∫blica para leitura
        print("3Ô∏è‚É£ Configurando pol√≠tica p√∫blica...")
        bucket_policy = {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Sid": "PublicReadGetObject",
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "s3:GetObject",
                    "Resource": f"arn:aws:s3:::{bucket_name}/*"
                }
            ]
        }
        
        s3.put_bucket_policy(
            Bucket=bucket_name,
            Policy=json.dumps(bucket_policy)
        )
        print("‚úÖ Pol√≠tica p√∫blica configurada")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao corrigir S3: {e}")
        return False

def verificar_cloudfront():
    """Verifica configura√ß√£o do CloudFront"""
    print("\nüîç VERIFICANDO CLOUDFRONT")
    print("=" * 40)
    
    try:
        cloudfront = boto3.client('cloudfront')
        
        # Lista distribui√ß√µes
        response = cloudfront.list_distributions()
        
        if 'DistributionList' in response and 'Items' in response['DistributionList']:
            for dist in response['DistributionList']['Items']:
                domain_name = dist['DomainName']
                if 'd3q2d002qno2yn.cloudfront.net' in domain_name:
                    print(f"‚úÖ Distribui√ß√£o encontrada: {domain_name}")
                    
                    # Verifica configura√ß√£o
                    dist_id = dist['Id']
                    detail = cloudfront.get_distribution(Id=dist_id)
                    config = detail['Distribution']['DistributionConfig']
                    
                    # Verifica Default Root Object
                    if 'DefaultRootObject' in config and config['DefaultRootObject']:
                        print(f"‚úÖ Default Root Object: {config['DefaultRootObject']}")
                    else:
                        print("‚ùå Default Root Object n√£o configurado!")
                        return False, dist_id
                    
                    # Verifica origem
                    origins = config['Origins']['Items']
                    for origin in origins:
                        print(f"‚úÖ Origem: {origin['DomainName']}")
                    
                    return True, dist_id
        
        print("‚ùå Distribui√ß√£o CloudFront n√£o encontrada!")
        return False, None
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar CloudFront: {e}")
        return False, None

def corrigir_cloudfront(distribution_id):
    """Corrige configura√ß√£o do CloudFront"""
    print("\nüîß CORRIGINDO CLOUDFRONT")
    print("=" * 40)
    
    try:
        cloudfront = boto3.client('cloudfront')
        
        # Obt√©m configura√ß√£o atual
        response = cloudfront.get_distribution_config(Id=distribution_id)
        config = response['DistributionConfig']
        etag = response['ETag']
        
        # Atualiza Default Root Object
        config['DefaultRootObject'] = 'index.html'
        
        # Atualiza a distribui√ß√£o
        cloudfront.update_distribution(
            DistributionConfig=config,
            Id=distribution_id,
            IfMatch=etag
        )
        
        print("‚úÖ CloudFront atualizado com Default Root Object")
        print("‚è≥ Aguarde alguns minutos para propaga√ß√£o...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao corrigir CloudFront: {e}")
        return False

def testar_apos_correcao():
    """Testa acesso ap√≥s corre√ß√µes"""
    print("\nüß™ TESTANDO AP√ìS CORRE√á√ïES")
    print("=" * 40)
    
    import time
    
    print("‚è≥ Aguardando 30 segundos para propaga√ß√£o...")
    time.sleep(30)
    
    url = "https://d3q2d002qno2yn.cloudfront.net"
    
    try:
        response = requests.get(url, timeout=10)
        print(f"üåê Status: {response.status_code}")
        
        if response.status_code == 200:
            print("üéâ SUCESSO! Site funcionando!")
            return True
        elif response.status_code == 403:
            print("‚ö†Ô∏è  Ainda com erro 403 - pode precisar de mais tempo")
            return False
        else:
            print(f"‚ö†Ô∏è  Status inesperado: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

def main():
    print("üö® CORRE√á√ÉO ERRO 403 - AWS")
    print("=" * 50)
    print(f"‚è∞ {datetime.now().strftime('%H:%M:%S')}")
    
    # Verifica configura√ß√£o atual
    s3_ok = verificar_s3_bucket()
    cloudfront_ok, dist_id = verificar_cloudfront()
    
    if not s3_ok:
        print("\nüîß S3 precisa de corre√ß√£o...")
        if corrigir_s3_bucket():
            print("‚úÖ S3 corrigido!")
        else:
            print("‚ùå Falha ao corrigir S3")
            return
    
    if not cloudfront_ok and dist_id:
        print("\nüîß CloudFront precisa de corre√ß√£o...")
        if corrigir_cloudfront(dist_id):
            print("‚úÖ CloudFront corrigido!")
        else:
            print("‚ùå Falha ao corrigir CloudFront")
            return
    
    # Testa ap√≥s corre√ß√µes
    if testar_apos_correcao():
        print("\nüéâ PROBLEMA RESOLVIDO!")
    else:
        print("\n‚è≥ Aguarde mais tempo para propaga√ß√£o")
    
    print("\n" + "=" * 50)
    print("üìù RESUMO:")
    print("- S3 configurado como website p√∫blico")
    print("- CloudFront com Default Root Object")
    print("- Teste realizado")
    print("=" * 50)

if __name__ == "__main__":
    main()
