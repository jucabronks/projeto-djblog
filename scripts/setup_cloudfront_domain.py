#!/usr/bin/env python3
"""
Script para configurar dom√≠nio customizado no CloudFront existente
Adiciona alias ao CloudFront atual
"""

import boto3
import json
import time
from datetime import datetime
from botocore.exceptions import ClientError


class CloudFrontDomainSetup:
    """Configurar dom√≠nio no CloudFront existente"""
    
    def __init__(self, distribution_id: str, domain_name: str):
        self.distribution_id = distribution_id
        self.domain_name = domain_name
        self.cloudfront = boto3.client('cloudfront')
        self.acm = boto3.client('acm', region_name='us-east-1')  # ACM deve ser us-east-1
        
    def log(self, message: str, level: str = "INFO"):
        """Log com timestamp"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        icons = {"INFO": "‚ÑπÔ∏è", "SUCCESS": "‚úÖ", "ERROR": "‚ùå", "WARNING": "‚ö†Ô∏è"}
        print(f"{icons.get(level, '‚ÑπÔ∏è')} [{timestamp}] {message}")
        
    def request_ssl_certificate(self) -> str:
        """Solicitar certificado SSL via ACM"""
        self.log(f"Solicitando certificado SSL para {self.domain_name}")
        
        try:
            response = self.acm.request_certificate(
                DomainName=self.domain_name,
                SubjectAlternativeNames=[f"www.{self.domain_name}"],
                ValidationMethod='DNS'
            )
            
            cert_arn = response['CertificateArn']
            self.log(f"Certificado solicitado: {cert_arn}", "SUCCESS")
            
            # Aguardar informa√ß√µes de valida√ß√£o
            time.sleep(5)
            
            cert_details = self.acm.describe_certificate(CertificateArn=cert_arn)
            validation_options = cert_details['Certificate']['DomainValidationOptions']
            
            self.log("üìù Configure os seguintes registros DNS para validar:")
            print()
            for option in validation_options:
                record = option['ResourceRecord']
                print(f"üåê Dom√≠nio: {option['DomainName']}")
                print(f"üìù Nome: {record['Name']}")
                print(f"üè∑Ô∏è Tipo: {record['Type']}")
                print(f"üìã Valor: {record['Value']}")
                print("-" * 60)
                
            return cert_arn
            
        except Exception as e:
            self.log(f"Erro ao solicitar certificado: {e}", "ERROR")
            return None
            
    def update_cloudfront_distribution(self, cert_arn: str) -> bool:
        """Atualizar distribui√ß√£o CloudFront com dom√≠nio customizado"""
        self.log(f"Atualizando CloudFront com dom√≠nio {self.domain_name}")
        
        try:
            # Obter configura√ß√£o atual
            response = self.cloudfront.get_distribution_config(Id=self.distribution_id)
            config = response['DistributionConfig']
            etag = response['ETag']
            
            # Adicionar aliases (dom√≠nios customizados)
            config['Aliases'] = {
                'Quantity': 2,
                'Items': [self.domain_name, f"www.{self.domain_name}"]
            }
            
            # Adicionar certificado SSL
            config['ViewerCertificate'] = {
                'ACMCertificateArn': cert_arn,
                'SSLSupportMethod': 'sni-only',
                'MinimumProtocolVersion': 'TLSv1.2_2021'
            }
            
            # Atualizar distribui√ß√£o
            self.cloudfront.update_distribution(
                Id=self.distribution_id,
                DistributionConfig=config,
                IfMatch=etag
            )
            
            self.log("CloudFront atualizado com sucesso!", "SUCCESS")
            self.log("‚è∞ Aguarde 15-20 minutos para propaga√ß√£o", "WARNING")
            return True
            
        except Exception as e:
            self.log(f"Erro ao atualizar CloudFront: {e}", "ERROR")
            return False
            
    def generate_dns_instructions(self, cloudfront_domain: str):
        """Gerar instru√ß√µes de DNS"""
        self.log("üìù Instru√ß√µes para configurar DNS:")
        print()
        print("üîß Configure estes registros no seu provedor de DNS:")
        print()
        print(f"üìã Registro A (raiz):")
        print(f"   Nome: {self.domain_name}")
        print(f"   Tipo: CNAME")
        print(f"   Valor: {cloudfront_domain}")
        print()
        print(f"üìã Registro CNAME (www):")
        print(f"   Nome: www.{self.domain_name}")
        print(f"   Tipo: CNAME") 
        print(f"   Valor: {cloudfront_domain}")
        print()
        
    def setup_domain(self, cloudfront_domain: str) -> bool:
        """Configurar dom√≠nio completo"""
        self.log(f"üöÄ Configurando dom√≠nio {self.domain_name}")
        
        # 1. Solicitar certificado SSL
        cert_arn = self.request_ssl_certificate()
        if not cert_arn:
            return False
            
        self.log("‚ö†Ô∏è IMPORTANTE: Configure os registros DNS mostrados acima!")
        self.log("Aguarde alguns minutos para valida√ß√£o do certificado...")
        
        # Aguardar confirma√ß√£o do usu√°rio
        input("\\nPressione ENTER ap√≥s configurar os registros DNS...")
        
        # 2. Verificar se certificado foi validado
        self.log("Verificando valida√ß√£o do certificado...")
        max_attempts = 10
        for attempt in range(max_attempts):
            try:
                cert_details = self.acm.describe_certificate(CertificateArn=cert_arn)
                status = cert_details['Certificate']['Status']
                
                if status == 'ISSUED':
                    self.log("Certificado validado com sucesso!", "SUCCESS")
                    break
                elif status == 'PENDING_VALIDATION':
                    self.log(f"Aguardando valida√ß√£o... (tentativa {attempt + 1}/{max_attempts})")
                    time.sleep(30)
                else:
                    self.log(f"Status do certificado: {status}", "WARNING")
                    time.sleep(30)
            except Exception as e:
                self.log(f"Erro ao verificar certificado: {e}", "ERROR")
                time.sleep(30)
        else:
            self.log("Timeout na valida√ß√£o do certificado", "ERROR")
            self.log("Continue manualmente no console AWS", "WARNING")
            return False
            
        # 3. Atualizar CloudFront
        if not self.update_cloudfront_distribution(cert_arn):
            return False
            
        # 4. Gerar instru√ß√µes de DNS
        self.generate_dns_instructions(cloudfront_domain)
        
        self.log("üéâ Configura√ß√£o conclu√≠da!", "SUCCESS")
        self.log(f"üåê Seu site estar√° em: https://{self.domain_name}")
        
        return True


def main():
    """Fun√ß√£o principal"""
    print("üåê Configurar Dom√≠nio no CloudFront - DJBlog")
    print("=" * 50)
    
    # Informa√ß√µes do CloudFront atual
    distribution_id = "E3S1TW1RZGH9RL"
    cloudfront_domain = "d3q2d002qno2yn.cloudfront.net"
    
    print(f"CloudFront atual: {cloudfront_domain}")
    print(f"Distribution ID: {distribution_id}")
    print()
    
    # Solicitar dom√≠nio
    domain_name = input("Digite seu dom√≠nio (ex: noticiasdigitais.com.br): ").strip()
    
    if not domain_name:
        print("‚ùå Dom√≠nio √© obrigat√≥rio!")
        return
        
    print(f"\\nüìã Configura√ß√£o:")
    print(f"   Dom√≠nio: {domain_name}")
    print(f"   CloudFront: {cloudfront_domain}")
    print(f"   SSL: Ser√° configurado automaticamente")
    
    print(f"\\nüìù Requisitos:")
    print(f"   1. Dom√≠nio registrado e funcionando")
    print(f"   2. Acesso ao painel DNS do dom√≠nio")
    print(f"   3. AWS ACM configurado")
    
    confirm = input("\\nContinuar? [y/N]: ").strip().lower()
    if confirm != 'y':
        print("Configura√ß√£o cancelada.")
        return
        
    # Executar configura√ß√£o
    domain_setup = CloudFrontDomainSetup(distribution_id, domain_name)
    success = domain_setup.setup_domain(cloudfront_domain)
    
    if success:
        print(f"\\nüéâ Dom√≠nio configurado!")
        print(f"üåê Site: https://{domain_name}")
    else:
        print("\\n‚ùå Configura√ß√£o falhou. Verifique os erros acima.")
        

if __name__ == "__main__":
    main()
