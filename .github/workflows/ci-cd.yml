name: CI/CD Serverless News Blog

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Rodar testes
        run: |
          python -m pytest tests/ -v

      - name: Lint (opcional)
        run: |
          pip install flake8
          flake8 .

  package-deploy:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Instalar dependências
        run: pip install -r requirements.txt

      - name: Empacotar Lambdas
        run: |
          rm -f *.zip
          zip -j lambda_coletor.zip lambda_coletor.py utils.py summarize_ai.py
          zip -j lambda_publicar_wordpress.zip lambda_publicar_wordpress.py utils.py
          zip -j lambda_limpeza.zip lambda_limpeza.py utils.py
          zip -j lambda_health_check.zip lambda_health_check.py utils.py

      - name: Configurar Terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform/aws
          
          # Criar arquivo terraform.tfvars com as variáveis
          cat > terraform.tfvars << EOF
          aws_region = "us-east-1"
          project_name = "projeto-vm"
          environment = "dev"
          
          # MongoDB
          mongo_uri = "${{ secrets.MONGO_URI }}"
          
          # OpenAI (opcional)
          openai_api_key = "${{ secrets.OPENAI_API_KEY }}"
          
          # Datadog (opcional)
          dd_api_key = "${{ secrets.DD_API_KEY }}"
          
          # WordPress (opcional)
          wp_url = "${{ secrets.WP_URL }}"
          wp_user = "${{ secrets.WP_USER }}"
          wp_app_password = "${{ secrets.WP_APP_PASSWORD }}"
          
          # Email para alertas
          alarm_email = "${{ secrets.ALARM_EMAIL }}"
          
          # Configurações de coleta
          nicho = "tecnologia"
          pais = "Brasil"
          max_news_per_source = 3
          
          # Nichos a coletar
          nicho_lista = [
            "tecnologia",
            "esportes", 
            "saude",
            "economia"
          ]
          
          # Categorias WordPress
          categorias_wp = {
            tecnologia = 2
            esportes   = 3
            saude      = 4
            economia   = 5
          }
          
          # Configuração de coletas
          coletas = [
            {
              pais           = "Brasil"
              cron           = "0 */6 * * ? *"
              timezone       = "America/Sao_Paulo"
              nicho          = "tecnologia"
              mongo_uri      = "${{ secrets.MONGO_URI }}"
              openai_api_key = "${{ secrets.OPENAI_API_KEY }}"
              dd_api_key     = "${{ secrets.DD_API_KEY }}"
              dd_site        = "datadoghq.com"
              dd_env         = "prod"
              max_news       = 3
              copys_api_user = ""
              copys_api_key  = ""
            }
          ]
          EOF

      - name: Deploy via Terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform/aws
          
          # Inicializar Terraform sem backend S3 (usar local)
          terraform init -backend=false
          
          # Aplicar configuração
          terraform apply -auto-approve 