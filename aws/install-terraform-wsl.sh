#!/bin/bash

# =============================================================================
# INSTALAR TERRAFORM NO WSL/LINUX
# =============================================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir com cores
print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${CYAN}üìã $1${NC}"
}

print_header() {
    echo -e "${WHITE}üöÄ $1${NC}"
}

print_header "Instalando Terraform no WSL/Linux..."

# Verificar se j√° est√° instalado
if command -v terraform &> /dev/null; then
    TERRAFORM_VERSION=$(terraform version -json | jq -r '.terraform_version')
    print_status "Terraform j√° est√° instalado: $TERRAFORM_VERSION"
    
    # Verificar se a vers√£o √© compat√≠vel
    REQUIRED_VERSION="1.12.0"
    if [ "$(printf '%s\n' "$REQUIRED_VERSION" "$TERRAFORM_VERSION" | sort -V | head -n1)" = "$REQUIRED_VERSION" ]; then
        print_status "Vers√£o compat√≠vel! ‚úÖ"
        exit 0
    else
        print_warning "Vers√£o antiga detectada. Atualizando..."
    fi
fi

# Detectar distribui√ß√£o Linux
if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$NAME
    VER=$VERSION_ID
else
    print_error "N√£o foi poss√≠vel detectar a distribui√ß√£o Linux"
    exit 1
fi

print_info "Distribui√ß√£o detectada: $OS $VER"

# Instalar depend√™ncias
print_info "Instalando depend√™ncias..."

if [[ "$OS" == *"Ubuntu"* ]] || [[ "$OS" == *"Debian"* ]]; then
    sudo apt-get update
    sudo apt-get install -y wget unzip jq
elif [[ "$OS" == *"CentOS"* ]] || [[ "$OS" == *"Red Hat"* ]] || [[ "$OS" == *"Amazon Linux"* ]]; then
    sudo yum update -y
    sudo yum install -y wget unzip jq
elif [[ "$OS" == *"Fedora"* ]]; then
    sudo dnf update -y
    sudo dnf install -y wget unzip jq
else
    print_warning "Distribui√ß√£o n√£o reconhecida. Tentando instalar com apt-get..."
    sudo apt-get update
    sudo apt-get install -y wget unzip jq
fi

# Baixar Terraform
print_info "Baixando Terraform..."
TEMP_DIR=$(mktemp -d)
cd "$TEMP_DIR"

# Obter a vers√£o mais recente
LATEST_VERSION=$(curl -s https://checkpoint-api.hashicorp.com/v1/check/terraform | jq -r '.current_version')

print_info "Vers√£o mais recente: $LATEST_VERSION"

# Baixar Terraform
curl -LO "https://releases.hashicorp.com/terraform/${LATEST_VERSION}/terraform_${LATEST_VERSION}_linux_amd64.zip"

# Verificar se o download foi bem-sucedido
if [ ! -f "terraform_${LATEST_VERSION}_linux_amd64.zip" ]; then
    print_error "Falha ao baixar Terraform"
    exit 1
fi

print_status "Download conclu√≠do"

# Extrair e instalar
print_info "Extraindo e instalando Terraform..."
unzip -q "terraform_${LATEST_VERSION}_linux_amd64.zip"

# Mover para /usr/local/bin
sudo mv terraform /usr/local/bin/

# Verificar instala√ß√£o
if command -v terraform &> /dev/null; then
    INSTALLED_VERSION=$(terraform version -json | jq -r '.terraform_version')
    print_status "Terraform instalado com sucesso: $INSTALLED_VERSION"
else
    print_error "Falha na instala√ß√£o do Terraform"
    exit 1
fi

# Limpar arquivos tempor√°rios
cd - > /dev/null
rm -rf "$TEMP_DIR"

echo ""
print_header "Instala√ß√£o conclu√≠da!"
echo ""
print_info "Para testar o Terraform:"
echo "   terraform version"
echo "   terraform --help"
echo ""
print_info "Pr√≥ximos passos:"
echo "   1. Configure AWS CLI: ./install-aws-cli-wsl.sh"
echo "   2. Configure permiss√µes: ./setup-aws-permissions-wsl.sh"
echo "   3. Configure backend: ./configure-terraform-backend-wsl.sh" 