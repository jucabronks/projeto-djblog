# =============================================================================
# SCRIPT DE CONFIGURA√á√ÉO DE PERMISS√ïES AWS PARA PROJETO VM (POWERSHELL)
# =============================================================================

param(
    [string]$Region = "us-east-1"
)

# Configurar para parar em caso de erro
$ErrorActionPreference = "Stop"

Write-Host "üöÄ Configurando permiss√µes AWS para o projeto..." -ForegroundColor Green

# Verificar se AWS CLI est√° instalado
try {
    $null = Get-Command aws -ErrorAction Stop
    Write-Host "‚úÖ AWS CLI encontrado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå AWS CLI n√£o est√° instalado. Instale primeiro:" -ForegroundColor Red
    Write-Host "   https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html" -ForegroundColor Yellow
    exit 1
}

# Verificar se est√° logado na AWS
try {
    $callerIdentity = aws sts get-caller-identity | ConvertFrom-Json
    Write-Host "‚úÖ Logado na AWS" -ForegroundColor Green
} catch {
    Write-Host "‚ùå N√£o est√° logado na AWS. Execute:" -ForegroundColor Red
    Write-Host "   aws configure" -ForegroundColor Yellow
    exit 1
}

# Obter informa√ß√µes da conta
$ACCOUNT_ID = $callerIdentity.Account
$USER_ARN = $callerIdentity.Arn
$USER_NAME = $USER_ARN.Split('/')[1]

Write-Host "‚úÖ Logado como: $USER_NAME" -ForegroundColor Green
Write-Host "‚úÖ Account ID: $ACCOUNT_ID" -ForegroundColor Green

# Nome da pol√≠tica
$POLICY_NAME = "ProjetoVMPermissions"
$POLICY_DESCRIPTION = "Permiss√µes necess√°rias para o projeto VM serverless"

Write-Host "üìã Criando pol√≠tica IAM: $POLICY_NAME" -ForegroundColor Cyan

# Criar pol√≠tica IAM
try {
    $policyResult = aws iam create-policy `
        --policy-name $POLICY_NAME `
        --policy-document file://iam-policy.json `
        --description $POLICY_DESCRIPTION | ConvertFrom-Json
    $POLICY_ARN = $policyResult.Policy.Arn
    Write-Host "‚úÖ Pol√≠tica criada: $POLICY_ARN" -ForegroundColor Green
} catch {
    try {
        $POLICY_ARN = "arn:aws:iam::$ACCOUNT_ID`:policy/$POLICY_NAME"
        $null = aws iam get-policy --policy-arn $POLICY_ARN
        Write-Host "‚úÖ Pol√≠tica j√° existe: $POLICY_ARN" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Erro ao criar/obter pol√≠tica" -ForegroundColor Red
        exit 1
    }
}

# Verificar se o usu√°rio j√° existe
try {
    $null = aws iam get-user --user-name $USER_NAME
    Write-Host "‚úÖ Usu√°rio IAM encontrado: $USER_NAME" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  Usu√°rio IAM n√£o encontrado. Criando..." -ForegroundColor Yellow
    aws iam create-user --user-name $USER_NAME
    Write-Host "‚úÖ Usu√°rio criado: $USER_NAME" -ForegroundColor Green
}

# Anexar pol√≠tica ao usu√°rio
Write-Host "üîó Anexando pol√≠tica ao usu√°rio..." -ForegroundColor Cyan

try {
    aws iam attach-user-policy `
        --user-name $USER_NAME `
        --policy-arn $POLICY_ARN
    Write-Host "‚úÖ Pol√≠tica anexada com sucesso!" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  Pol√≠tica j√° estava anexada ou erro ao anexar" -ForegroundColor Yellow
}

# Criar grupo (opcional)
$GROUP_NAME = "ProjetoVMGroup"
Write-Host "üë• Criando grupo: $GROUP_NAME" -ForegroundColor Cyan

try {
    aws iam create-group --group-name $GROUP_NAME
    Write-Host "‚úÖ Grupo criado" -ForegroundColor Green
} catch {
    Write-Host "‚úÖ Grupo j√° existe" -ForegroundColor Green
}

# Anexar pol√≠tica ao grupo
try {
    aws iam attach-group-policy `
        --group-name $GROUP_NAME `
        --policy-arn $POLICY_ARN
    Write-Host "‚úÖ Pol√≠tica anexada ao grupo" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  Pol√≠tica j√° estava anexada ao grupo" -ForegroundColor Yellow
}

# Adicionar usu√°rio ao grupo
try {
    aws iam add-user-to-group `
        --group-name $GROUP_NAME `
        --user-name $USER_NAME
    Write-Host "‚úÖ Usu√°rio adicionado ao grupo!" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  Usu√°rio j√° estava no grupo" -ForegroundColor Yellow
}

# Criar bucket S3 para Terraform state (se n√£o existir)
$BUCKET_NAME = "projeto-vm-terraform-state-$ACCOUNT_ID"
Write-Host "ü™£ Verificando bucket S3: $BUCKET_NAME" -ForegroundColor Cyan

try {
    $null = aws s3 ls "s3://$BUCKET_NAME"
    Write-Host "‚úÖ Bucket S3 j√° existe!" -ForegroundColor Green
} catch {
    Write-Host "üì¶ Criando bucket S3 para Terraform state..." -ForegroundColor Cyan
    aws s3 mb "s3://$BUCKET_NAME" --region $Region
    
    # Habilitar versionamento
    aws s3api put-bucket-versioning `
        --bucket $BUCKET_NAME `
        --versioning-configuration Status=Enabled
    
    # Habilitar criptografia
    $encryptionConfig = @{
        Rules = @(
            @{
                ApplyServerSideEncryptionByDefault = @{
                    SSEAlgorithm = "AES256"
                }
            }
        )
    } | ConvertTo-Json -Depth 10

    aws s3api put-bucket-encryption `
        --bucket $BUCKET_NAME `
        --server-side-encryption-configuration $encryptionConfig
    
    Write-Host "‚úÖ Bucket S3 criado e configurado!" -ForegroundColor Green
}

# Criar tabela DynamoDB para locks do Terraform
$TABLE_NAME = "terraform-locks"
Write-Host "üóÑÔ∏è  Verificando tabela DynamoDB: $TABLE_NAME" -ForegroundColor Cyan

try {
    $null = aws dynamodb describe-table --table-name $TABLE_NAME
    Write-Host "‚úÖ Tabela DynamoDB j√° existe!" -ForegroundColor Green
} catch {
    Write-Host "üìä Criando tabela DynamoDB para locks..." -ForegroundColor Cyan
    aws dynamodb create-table `
        --table-name $TABLE_NAME `
        --attribute-definitions AttributeName=LockID,AttributeType=S `
        --key-schema AttributeName=LockID,KeyType=HASH `
        --billing-mode PAY_PER_REQUEST `
        --region $Region
    
    Write-Host "‚è≥ Aguardando tabela ficar ativa..." -ForegroundColor Yellow
    aws dynamodb wait table-exists --table-name $TABLE_NAME
    Write-Host "‚úÖ Tabela DynamoDB criada!" -ForegroundColor Green
}

Write-Host ""
Write-Host "üéâ Configura√ß√£o AWS conclu√≠da com sucesso!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Resumo:" -ForegroundColor Cyan
Write-Host "   ‚úÖ Pol√≠tica IAM: $POLICY_ARN" -ForegroundColor White
Write-Host "   ‚úÖ Usu√°rio: $USER_NAME" -ForegroundColor White
Write-Host "   ‚úÖ Grupo: $GROUP_NAME" -ForegroundColor White
Write-Host "   ‚úÖ Bucket S3: $BUCKET_NAME" -ForegroundColor White
Write-Host "   ‚úÖ Tabela DynamoDB: $TABLE_NAME" -ForegroundColor White
Write-Host ""
Write-Host "üîß Pr√≥ximos passos:" -ForegroundColor Cyan
Write-Host "   1. Atualize o arquivo terraform/aws/main.tf para usar o bucket correto" -ForegroundColor White
Write-Host "   2. Execute o workflow CI/CD no GitHub" -ForegroundColor White
Write-Host "   3. Verifique se o deploy funciona corretamente" -ForegroundColor White
Write-Host ""
Write-Host "üí° Para testar as permiss√µes:" -ForegroundColor Cyan
Write-Host "   aws lambda list-functions" -ForegroundColor White
Write-Host "   aws iam list-attached-user-policies --user-name $USER_NAME" -ForegroundColor White 